/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cloudglomerate.view;

import com.cloudglomerate.connection.Response;
import com.cloudglomerate.drive.AbstractFile;
import com.cloudglomerate.drive.CloudFolder;
import com.cloudglomerate.interfaces.Cloud;
import com.cloudglomerate.interfaces.CloudManager;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 *
 * @author drew
 */
public class HomeScreen extends javax.swing.JFrame {

    CloudFolder fold;
    /**
     * Creates new form HomeScreen
     */
    public HomeScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        boxLogin = new javax.swing.JButton();
        Listbt = new javax.swing.JButton();
        downloadBt = new javax.swing.JButton();
        parentDirbt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(fileList);

        boxLogin.setText("box login");
        boxLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxLoginActionPerformed(evt);
            }
        });

        Listbt.setText("list");
        Listbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListbtActionPerformed(evt);
            }
        });

        downloadBt.setText("download");
        downloadBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtActionPerformed(evt);
            }
        });

        parentDirbt.setText("parent directory");
        parentDirbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentDirbtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Listbt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downloadBt)
                        .addGap(18, 18, 18)
                        .addComponent(parentDirbt))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxLogin)
                    .addComponent(Listbt)
                    .addComponent(downloadBt)
                    .addComponent(parentDirbt))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boxLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxLoginActionPerformed
        // TODO add your handling code here:
        Response resp = CloudManager.getConnectionManager().requestConnection(Cloud.BOX);
        if (resp.getStatus() == Response.Status.INITIATED) {
            final JOptionPane optionPane = new JOptionPane("Please go to: " + resp.getConfirmURL(),
                    JOptionPane.QUESTION_MESSAGE,
                    JOptionPane.YES_NO_OPTION);





            // for copying style
            JLabel label = new JLabel();
            Font font = label.getFont();

            // create some css from the label's font
            StringBuffer style = new StringBuffer("font-family:" + font.getFamily() + ";");
            style.append("font-weight:" + (font.isBold() ? "bold" : "normal") + ";");
            style.append("font-size:" + font.getSize() + "pt;");

            // html content
            JEditorPane ep = new JEditorPane("text/html", "<html><body style=\"" + style + "\">" //
                    + "some text, and <a href=\"" + resp.getConfirmURL() + "\">" + resp.getConfirmURL() + "</a>" //
                    + "</body></html>");

            // handle link events
            ep.addHyperlinkListener(new HyperlinkListener() {

                @Override
                public void hyperlinkUpdate(HyperlinkEvent e) {
                    if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
                        try {
                            try {
                                Desktop.getDesktop().browse(e.getURL().toURI());
                                //ProcessHandler.launchUrl(e.getURL().toString()); // roll your own link launcher or use Desktop if J6+
                            } catch (IOException ex) {
                                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (URISyntaxException ex) {
                            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });
            ep.setEditable(false);
            ep.setBackground(label.getBackground());




            final JDialog dialog = new JDialog(this,
                    "Login",
                    true);
            dialog.setContentPane(optionPane);
            dialog.add(ep);
            dialog.setDefaultCloseOperation(
                    JDialog.DO_NOTHING_ON_CLOSE);
            dialog.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent we) {
                }
            });
            optionPane.addPropertyChangeListener(
                    new PropertyChangeListener() {

                        public void propertyChange(PropertyChangeEvent e) {
                            String prop = e.getPropertyName();

                            if (dialog.isVisible()
                                    && (e.getSource() == optionPane)
                                    && (prop.equals(JOptionPane.VALUE_PROPERTY))) {
                                //If you were going to check something
                                //before closing the window, you'd do
                                //it here.
                                dialog.setVisible(false);
                            }
                        }
                    });

            dialog.pack();
            dialog.setVisible(true);

            int value = ((Integer) optionPane.getValue()).intValue();
            if (value == JOptionPane.YES_OPTION) {
                CloudManager.getConnectionManager().connect(resp);
                fold = new CloudFolder();
                CloudManager.getDrive().list(fold);
                DefaultListModel fileModel = new DefaultListModel();
                for (AbstractFile file : fold.getContents()) {
                    fileModel.addElement(file);
                }
                fileList.setModel(fileModel);


            } else if (value == JOptionPane.NO_OPTION) {
            }

        }



    }//GEN-LAST:event_boxLoginActionPerformed

    private void ListbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListbtActionPerformed
        // TODO add your handling code here:

        AbstractFile folder = (AbstractFile) fileList.getSelectedValue();
        if (folder.isFolder()) {
            fold = (CloudFolder) folder;
            CloudManager.getDrive().list(fold);
            DefaultListModel fileModel = new DefaultListModel();
            for (AbstractFile file : fold.getContents()) {
                fileModel.addElement(file);
            }
            fileList.setModel(fileModel);
            
        }

    }//GEN-LAST:event_ListbtActionPerformed

    private void downloadBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtActionPerformed
        // TODO add your handling code here:
        List vals = fileList.getSelectedValuesList();
        final JFileChooser fc = new JFileChooser();
       fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal =  fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File loc = fc.getSelectedFile();//fc.getCurrentDirectory();
            System.out.println("The directory to dowonload to is " + loc.toPath());
            for (Object val : vals) {
                AbstractFile file = (AbstractFile) val;
                CloudManager.getDrive().download(file, loc);
            }
        }
    }//GEN-LAST:event_downloadBtActionPerformed

    private void parentDirbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentDirbtActionPerformed
        // TODO add your handling code here:
        fold = CloudManager.getDrive().listParentDirectory(fold);
            DefaultListModel fileModel = new DefaultListModel();
            for (AbstractFile file : fold.getContents()) {
                fileModel.addElement(file);
            }
            fileList.setModel(fileModel);
    }//GEN-LAST:event_parentDirbtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new HomeScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Listbt;
    private javax.swing.JButton boxLogin;
    private javax.swing.JButton downloadBt;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton parentDirbt;
    // End of variables declaration//GEN-END:variables
}
